<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.FlightMapper">
	<!-- ResultMap 정의 -->
	<resultMap id="FlightResultMap" type="com.example.demo.dto.FlightDto">
		<id property="flightId" column="flight_id"/>
		<!-- <result property="flightNumber" column="flight_number"/> --> <!-- 필요 시 유지 -->
		<result property="departureAirport" column="departure_airport"/>
		<result property="arrivalAirport" column="arrival_airport"/>
		<result property="departureTime" column="departure_time"/>
		<result property="arrivalTime" column="arrival_time"/>
		<result property="flightDuration" column="flight_duration"/>
		<result property="airplaneId" column="airplane_id"/>
	</resultMap>
	
	<select id="findAllAirports" resultType="com.example.demo.dto.AirportsDto">
		SELECT * FROM airports
	</select>
	<select id="getAvailableFlights" resultType="com.example.demo.dto.FlightDto">
		SELECT flight_id, departure_airport, arrival_airport, departure_time FROM Flights
	</select>
	<select id="getAvailableFlightsByDate" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE DATE(departure_time) = #{date}
	</select>
	<select id="getAllFlights" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE departure_time >= NOW() ORDER BY departure_time 
	</select>
	<select id="getFlightsWithPagination" resultType="com.example.demo.dto.FlightDto">
		SELECT flight_id, departure_airport, arrival_airport, departure_time, arrival_time, flight_duration, airplane_id
		FROM flights ORDER BY departure_time ASC LIMIT #{limit} OFFSET #{offset}
	</select>
	<select id="getTotalFlightsCount" resultType="int">
		SELECT COUNT(*) FROM flights
	</select>
	<select id="getDepartureFlights" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE departure_time >= NOW() AND departure_airport IN ('GMP', 'ICN')
		ORDER BY departure_time LIMIT 5
	</select>
	<select id="getArrivalFlights" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE departure_time >= NOW() AND arrival_airport IN ('GMP', 'ICN')
		ORDER BY departure_time LIMIT 5
	</select>
	<select id="getFlightsByDate" parameterType="String" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE DATE(departure_time) = #{date}
	</select>
	<select id="getTotalSeatsByFlightId" resultType="map">
		SELECT flight_id, CAST(SUM(CASE WHEN is_available = 1 THEN 1 ELSE 0 END) AS SIGNED)
		AS totalSeats FROM flightseats GROUP BY flight_id;
	</select>
	<!-- countAvailableSeats 매핑 추가 -->
	<select id="countAvailableSeats" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM FlightSeats WHERE flight_id = #{flightId} AND is_available = 1
	</select>
	<select id="getMemberByUserId" parameterType="String" resultType="com.example.demo.dto.MemberDto">
    	SELECT * FROM member WHERE userid = #{userid}
	</select>
	<select id="getFlightByGoingFlightId" parameterType="String" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE flight_id = #{goingFlightId}
	</select>
	<insert id="addReservation" parameterType="com.example.demo.dto.ReservationDto" useGeneratedKeys="true" keyProperty="reservationId">
		INSERT INTO reservations (userid, flight_id, reservation_date, seat_class, passenger_type, sung, pnr, name, charge, charge_pay)
		VALUES (#{userid}, #{flightId}, NOW(), #{seatClass}, #{passengerType}, #{sung}, #{pnr}, #{name}, #{charge}, #{chargePay})
	</insert>
	<select id="getSeatIdBySeatNumber" parameterType="string" resultType="int">
		SELECT seat_id FROM seattemplate WHERE seat_number = #{seatNumber}
	</select>
	<insert id="addSeatToReservation">
		INSERT INTO reservation_seats (reservation_id, seat_id) VALUES (#{reservationId}, #{seatId})
	</insert>
	<update id="updateSeatAvailability">
		UPDATE flightseats SET is_available = 0 WHERE flight_id = #{flightId} AND seat_id = #{seatId}
	</update>
	<select id="getFlightByReturnFlightId" parameterType="String" resultType="com.example.demo.dto.FlightDto">
		SELECT * FROM flights WHERE flight_id = #{returnFlightId}
	</select>
	<!-- 기존 findFlights 쿼리 유지 -->
	<select id="findFlights" parameterType="map" resultType="com.example.demo.dto.FlightDto">
		SELECT DISTINCT f.flight_id, f.flight_number, f.departure_airport, f.arrival_airport, f.departure_time, f.arrival_time, f.flight_duration,
		f.airplane_id FROM flights f JOIN FlightSeats fs ON f.flight_id = fs.flight_id JOIN SeatTemplate st ON fs.seat_id = st.seat_id
		WHERE f.departure_airport = #{departure} AND f.arrival_airport = #{arrival}
		<!-- 출발일 필터링 -->
		<if test="departureDate != null and departureDate != ''">
			AND DATE(f.departure_time) = #{departureDate}
		</if>
		<!-- 도착일 필터링 -->
		<if test="arrivalDate != null and arrivalDate != ''">
			AND DATE(f.arrival_time) = #{arrivalDate}
		</if>
		<!-- 좌석 등급 필터링 -->
		<if test="seatClass != null and seatClass != ''">
			AND st.seat_class = #{seatClass}
		</if>
		<!-- 좌석 가용성 필터링 -->
		<if test="passengers != null">
			AND fs.is_available = 1
		</if>
		<!-- 그룹화 및 좌석 수 필터링 -->
		<if test="passengers != null">
			GROUP BY f.flight_id HAVING COUNT(fs.seat_id) >= #{passengers}
		</if>
	</select>
	<!-- findFlightsWithFilters 매핑 -->
	<select id="findFlightsWithFilters" parameterType="map" resultType="com.example.demo.dto.FlightDto">
		SELECT DISTINCT f.flight_id, f.departure_airport, f.arrival_airport, f.departure_time, f.arrival_time, f.flight_duration, f.airplane_id,
		COUNT(fs.seat_id) AS availableSeats FROM flights f JOIN FlightSeats fs ON f.flight_id = fs.flight_id JOIN SeatTemplate st
		ON fs.seat_id = st.seat_id WHERE f.departure_airport = #{departure} AND f.arrival_airport = #{arrival} 
		<!-- 출발일 필터링 -->
		<if test="departureDate != null and departureDate != ''">
			AND DATE_FORMAT(f.departure_time, '%Y-%m-%d') = #{departureDate}
		</if>
		<!-- 도착일 필터링 -->
		<if test="arrivalDate != null and arrivalDate != '' and (departureDate == null or departureDate == '')">
			AND DATE_FORMAT(f.departure_time, '%Y-%m-%d') = #{arrivalDate}
		</if>
		<!-- 좌석 등급 필터링 -->
		<if test="seatClass != null and seatClass != ''">
			AND st.seat_class = #{seatClass}
		</if>
		<!-- 좌석 가용성 필터링 -->
		<if test="passengers != null">
			AND fs.is_available = 1
		</if>
		<!-- 그룹화 및 좌석 수 필터링 -->
		<if test="passengers != null">
			GROUP BY f.flight_id HAVING COUNT(fs.seat_id) >= #{passengers}
		</if>
	</select>
	<!-- getSeatsByFlightIdAndClass 매핑 추가 -->
	<select id="getSeatsByFlightIdAndClass" parameterType="map" resultType="com.example.demo.dto.SeatDto">
		SELECT * FROM FlightSeats WHERE flight_id = #{flightId} AND seat_class = #{seatClass} AND is_available = 1
	</select>
	<select id="getAvailableSeatsByFlightAndClass" resultType="com.example.demo.dto.SeatDto">
		SELECT st.seat_id AS seatId, st.seat_number AS seatNumber, st.seat_class AS seatClass, fs.is_available AS available  <!-- 여기서 별칭 사용 -->
		FROM seattemplate st JOIN flightseats fs ON st.seat_id = fs.seat_id WHERE fs.flight_id = #{flightId} AND st.seat_class = #{seatClass}
	</select>
	<insert id="addFlight" parameterType="com.example.demo.dto.FlightDto">
		INSERT INTO flights (departure_airport, arrival_airport, departure_time, arrival_time, airplane_id, flight_duration, flight_name)
		VALUES (#{departureAirport}, #{arrivalAirport}, #{departureTime}, #{arrivalTime}, #{airplaneId}, SEC_TO_TIME(TIMESTAMPDIFF(SECOND, #{departureTime}, #{arrivalTime})), CONCAT('EL', SUBSTRING(#{departureAirport}, -1), SUBSTRING(#{arrivalAirport}, -1), LPAD(FLOOR(RAND() * 100), 2, '0')))
	</insert>
	<select id="findAllAirplanes" resultType="com.example.demo.dto.AirplanesDto">
		SELECT * FROM airplanes
	</select>
	<insert id="addSeatsForFlight">
		INSERT INTO flightseats (flight_id, seat_id, is_available, seat_class)
		SELECT f.flight_id, s.seat_id, 1, '' FROM flights f LEFT JOIN flightseats fs
		ON f.flight_id = fs.flight_id JOIN (
		SELECT 1 AS seat_id UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
		SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL 
		SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12 UNION ALL 
		SELECT 13 UNION ALL SELECT 14 UNION ALL SELECT 15 UNION ALL SELECT 16 UNION ALL 
		SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19 UNION ALL SELECT 20 UNION ALL 
		SELECT 21 UNION ALL SELECT 22 UNION ALL SELECT 23 UNION ALL SELECT 24 UNION ALL 
		SELECT 25 UNION ALL SELECT 26 UNION ALL SELECT 27 UNION ALL SELECT 28 UNION ALL 
		SELECT 29 UNION ALL SELECT 30 UNION ALL SELECT 31 UNION ALL SELECT 32 UNION ALL 
		SELECT 33 UNION ALL SELECT 34 UNION ALL SELECT 35 UNION ALL SELECT 36 UNION ALL 
		SELECT 37 UNION ALL SELECT 38 UNION ALL SELECT 39 UNION ALL SELECT 40 UNION ALL 
		SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43 UNION ALL SELECT 44 UNION ALL 
		SELECT 45 UNION ALL SELECT 46 UNION ALL SELECT 47 UNION ALL SELECT 48 UNION ALL 
		SELECT 49 UNION ALL SELECT 50 UNION ALL SELECT 51 UNION ALL SELECT 52 UNION ALL 
		SELECT 53 UNION ALL SELECT 54 UNION ALL SELECT 55 UNION ALL SELECT 56 UNION ALL 
		SELECT 57 UNION ALL SELECT 58 UNION ALL SELECT 59 UNION ALL SELECT 60 UNION ALL 
		SELECT 61 UNION ALL SELECT 62 UNION ALL SELECT 63 UNION ALL SELECT 64 UNION ALL 
		SELECT 65 UNION ALL SELECT 66 UNION ALL SELECT 67 UNION ALL SELECT 68 UNION ALL 
		SELECT 69 UNION ALL SELECT 70 UNION ALL SELECT 71 UNION ALL SELECT 72 UNION ALL 
		SELECT 73 UNION ALL SELECT 74 UNION ALL SELECT 75 UNION ALL SELECT 76 UNION ALL 
		SELECT 77 UNION ALL SELECT 78 UNION ALL SELECT 79 UNION ALL SELECT 80 UNION ALL 
		SELECT 81 UNION ALL SELECT 82 UNION ALL SELECT 83 UNION ALL SELECT 84 UNION ALL 
		SELECT 85 UNION ALL SELECT 86 UNION ALL SELECT 87 UNION ALL SELECT 88 UNION ALL 
		SELECT 89 UNION ALL SELECT 90 UNION ALL SELECT 91 UNION ALL SELECT 92 UNION ALL 
		SELECT 93 UNION ALL SELECT 94 UNION ALL SELECT 95 UNION ALL SELECT 96 UNION ALL 
		SELECT 97 UNION ALL SELECT 98 UNION ALL SELECT 99 UNION ALL SELECT 100 UNION ALL 
		SELECT 101 UNION ALL SELECT 102 UNION ALL SELECT 103 UNION ALL SELECT 104 UNION ALL 
		SELECT 105 UNION ALL SELECT 106 UNION ALL SELECT 107 UNION ALL SELECT 108 UNION ALL 
		SELECT 109 UNION ALL SELECT 110 UNION ALL SELECT 111 UNION ALL SELECT 112 UNION ALL 
		SELECT 113 UNION ALL SELECT 114 UNION ALL SELECT 115 UNION ALL SELECT 116 UNION ALL 
		SELECT 117 UNION ALL SELECT 118 UNION ALL SELECT 119 UNION ALL SELECT 120 UNION ALL 
		SELECT 121 UNION ALL SELECT 122 UNION ALL SELECT 123 UNION ALL SELECT 124 UNION ALL 
		SELECT 125 UNION ALL SELECT 126 UNION ALL SELECT 127 UNION ALL SELECT 128 UNION ALL 
		SELECT 129 UNION ALL SELECT 130 UNION ALL SELECT 131 UNION ALL SELECT 132 UNION ALL 
		SELECT 133 UNION ALL SELECT 134 UNION ALL SELECT 135 UNION ALL SELECT 136 UNION ALL 
		SELECT 137 UNION ALL SELECT 138 UNION ALL SELECT 139 UNION ALL SELECT 140 UNION ALL 
		SELECT 141 UNION ALL SELECT 142 UNION ALL SELECT 143 UNION ALL SELECT 144 UNION ALL 
		SELECT 145 UNION ALL SELECT 146 UNION ALL SELECT 147 UNION ALL SELECT 148 UNION ALL 
		SELECT 149 UNION ALL SELECT 150 UNION ALL SELECT 151 UNION ALL SELECT 152 UNION ALL 
		SELECT 153 UNION ALL SELECT 154 UNION ALL SELECT 155 UNION ALL SELECT 156 UNION ALL 
		SELECT 157 UNION ALL SELECT 158 UNION ALL SELECT 159 UNION ALL SELECT 160 UNION ALL 
		SELECT 161 UNION ALL SELECT 162 UNION ALL SELECT 163 UNION ALL SELECT 164 UNION ALL 
		SELECT 165 UNION ALL SELECT 166 UNION ALL SELECT 167 UNION ALL SELECT 168 UNION ALL 
		SELECT 169 UNION ALL SELECT 170 UNION ALL SELECT 171 UNION ALL SELECT 172 UNION ALL 
		SELECT 173 UNION ALL SELECT 174 UNION ALL SELECT 175 UNION ALL SELECT 176 UNION ALL 
		SELECT 177 UNION ALL SELECT 178 UNION ALL SELECT 179 UNION ALL SELECT 180 UNION ALL 
		SELECT 181 UNION ALL SELECT 182 UNION ALL SELECT 183 UNION ALL SELECT 184 UNION ALL 
		SELECT 185 UNION ALL SELECT 186 UNION ALL SELECT 187 UNION ALL SELECT 188 UNION ALL 
		SELECT 189 UNION ALL SELECT 190 UNION ALL SELECT 191 UNION ALL SELECT 192 UNION ALL 
		SELECT 193 UNION ALL SELECT 194 UNION ALL SELECT 195 UNION ALL SELECT 196 UNION ALL 
		SELECT 197 UNION ALL SELECT 198 UNION ALL SELECT 199 UNION ALL SELECT 200) s
		ON fs.flight_id IS NULL
	</insert>
	
		
</mapper>